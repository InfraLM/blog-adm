const fetch = require('node-fetch');
const FormData = require('form-data');
const fs = require('fs');
const path = require('path');

console.log('========================================');
console.log(' TESTE DA APLICA√á√ÉO WEB');
console.log(' Blog Administra√ß√£o - Liberdade M√©dica');
console.log('========================================');
console.log();

const API_URL = 'http://localhost:3000/blog-adm/api';
let sessionCookie = null;

async function testWebApplication() {
    try {
        console.log('üîç 1. Testando health check (sem autentica√ß√£o)...');
        
        // Teste sem autentica√ß√£o deve falhar
        try {
            const healthResponse = await fetch(`${API_URL}/health`);
            if (healthResponse.status === 401) {
                console.log('‚úÖ Health check protegido corretamente (401)');
            } else {
                console.log('‚ö†Ô∏è Health check deveria estar protegido');
            }
        } catch (error) {
            console.log('‚ùå Servidor n√£o est√° rodando. Execute: npm start');
            return;
        }
        
        console.log();
        console.log('üîç 2. Testando login com credenciais inv√°lidas...');
        
        const invalidLoginResponse = await fetch(`${API_URL}/login`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                username: 'admin',
                password: 'wrong'
            })
        });
        
        const invalidLoginData = await invalidLoginResponse.json();
        
        if (invalidLoginResponse.status === 401) {
            console.log('‚úÖ Login com credenciais inv√°lidas rejeitado corretamente');
        } else {
            console.log('‚ùå Login deveria falhar com credenciais inv√°lidas');
        }
        
        console.log();
        console.log('üîç 3. Testando login com credenciais v√°lidas...');
        
        const loginResponse = await fetch(`${API_URL}/login`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                username: 'admbolado',
                password: 'lmbolado'
            })
        });
        
        const loginData = await loginResponse.json();
        
        if (loginData.success) {
            console.log('‚úÖ Login realizado com sucesso');
            
            // Extrair cookie de sess√£o
            const setCookieHeader = loginResponse.headers.get('set-cookie');
            if (setCookieHeader) {
                sessionCookie = setCookieHeader.split(';')[0];
                console.log('‚úÖ Cookie de sess√£o obtido');
            }
        } else {
            console.log('‚ùå Falha no login:', loginData.message);
            return;
        }
        
        console.log();
        console.log('üîç 4. Testando health check autenticado...');
        
        const authHealthResponse = await fetch(`${API_URL}/health`, {
            headers: {
                'Cookie': sessionCookie
            }
        });
        
        const authHealthData = await authHealthResponse.json();
        
        if (authHealthData.status === 'ok') {
            console.log('‚úÖ Health check autenticado:', authHealthData);
        } else {
            console.log('‚ùå Erro no health check autenticado');
        }
        
        console.log();
        console.log('üîç 5. Testando conex√£o PostgreSQL...');
        
        const connectionResponse = await fetch(`${API_URL}/test-connection`, {
            headers: {
                'Cookie': sessionCookie
            }
        });
        
        const connectionData = await connectionResponse.json();
        console.log('‚úÖ Teste de conex√£o:', connectionData);
        
        console.log();
        console.log('üîç 6. Testando listagem de artigos...');
        
        const articlesResponse = await fetch(`${API_URL}/articles`, {
            headers: {
                'Cookie': sessionCookie
            }
        });
        
        const articlesData = await articlesResponse.json();
        
        if (articlesData.success) {
            console.log('‚úÖ Artigos carregados:', {
                total: articlesData.total,
                primeiro_artigo: articlesData.articles[0] ? {
                    id: articlesData.articles[0].id,
                    titulo: articlesData.articles[0].titulo,
                    autor: articlesData.articles[0].autor
                } : 'Nenhum artigo'
            });
        } else {
            console.log('‚ùå Erro ao carregar artigos:', articlesData.message);
        }
        
        console.log();
        console.log('üîç 7. Testando upload de imagem...');
        
        // Criar imagem de teste
        const testImageBuffer = Buffer.from([
            0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D,
            0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
            0x08, 0x06, 0x00, 0x00, 0x00, 0x1F, 0x15, 0xC4, 0x89, 0x00, 0x00, 0x00,
            0x0A, 0x49, 0x44, 0x41, 0x54, 0x78, 0x9C, 0x63, 0x00, 0x01, 0x00, 0x00,
            0x05, 0x00, 0x01, 0x0D, 0x0A, 0x2D, 0xB4, 0x00, 0x00, 0x00, 0x00, 0x49,
            0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82
        ]);
        
        const testImagePath = path.join(__dirname, 'test-image.png');
        fs.writeFileSync(testImagePath, testImageBuffer);
        
        const formData = new FormData();
        formData.append('image', fs.createReadStream(testImagePath), {
            filename: 'test-image.png',
            contentType: 'image/png'
        });
        
        const uploadResponse = await fetch(`${API_URL}/upload-image`, {
            method: 'POST',
            headers: {
                'Cookie': sessionCookie
            },
            body: formData
        });
        
        const uploadData = await uploadResponse.json();
        
        if (uploadData.success) {
            console.log('‚úÖ Upload de imagem realizado:', {
                url: uploadData.image.url,
                size: uploadData.image.size
            });
        } else {
            console.log('‚ùå Erro no upload:', uploadData.message);
        }
        
        // Limpar arquivo de teste
        if (fs.existsSync(testImagePath)) {
            fs.unlinkSync(testImagePath);
        }
        
        console.log();
        console.log('üîç 8. Testando cria√ß√£o de artigo...');
        
        const articleData = {
            titulo: 'Teste de Artigo Web - ' + new Date().toISOString(),
            categoria: 'Teste',
            autor: 'Sistema de Teste Web',
            coautor: 'Co-autor Teste',
            resumo: 'Este √© um resumo de teste para a aplica√ß√£o web.',
            destaque: true,
            imagem_principal: uploadData.success ? uploadData.image.url : null,
            content: `
                <h1>T√≠tulo de Teste</h1>
                <p>Este √© um par√°grafo de teste para verificar se a aplica√ß√£o web est√° funcionando corretamente.</p>
                <h2>Subt√≠tulo</h2>
                <p>Outro par√°grafo para testar a funcionalidade completa da aplica√ß√£o web.</p>
            `
        };
        
        const createArticleResponse = await fetch(`${API_URL}/articles`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Cookie': sessionCookie
            },
            body: JSON.stringify(articleData)
        });
        
        const createArticleData = await createArticleResponse.json();
        
        if (createArticleData.success) {
            console.log('‚úÖ Artigo criado com sucesso:', {
                id: createArticleData.id,
                slug: createArticleData.slug,
                titulo: createArticleData.article.titulo
            });
        } else {
            console.log('‚ùå Erro ao criar artigo:', createArticleData.message);
        }
        
        console.log();
        console.log('üîç 9. Testando logout...');
        
        const logoutResponse = await fetch(`${API_URL}/logout`, {
            method: 'POST',
            headers: {
                'Cookie': sessionCookie
            }
        });
        
        const logoutData = await logoutResponse.json();
        
        if (logoutData.success) {
            console.log('‚úÖ Logout realizado com sucesso');
        } else {
            console.log('‚ùå Erro no logout:', logoutData.message);
        }
        
        console.log();
        console.log('üîç 10. Verificando se sess√£o foi invalidada...');
        
        const postLogoutHealthResponse = await fetch(`${API_URL}/health`, {
            headers: {
                'Cookie': sessionCookie
            }
        });
        
        if (postLogoutHealthResponse.status === 401) {
            console.log('‚úÖ Sess√£o invalidada corretamente ap√≥s logout');
        } else {
            console.log('‚ö†Ô∏è Sess√£o deveria estar invalidada ap√≥s logout');
        }
        
        console.log();
        console.log('========================================');
        console.log('‚úÖ TODOS OS TESTES DA APLICA√á√ÉO WEB PASSARAM!');
        console.log('========================================');
        console.log();
        console.log('üéâ Funcionalidades testadas com sucesso:');
        console.log('   ‚úÖ Sistema de autentica√ß√£o completo');
        console.log('   ‚úÖ Prote√ß√£o de rotas');
        console.log('   ‚úÖ Upload de imagens para Backblaze B2');
        console.log('   ‚úÖ Cria√ß√£o de artigos com novos campos');
        console.log('   ‚úÖ Listagem de artigos');
        console.log('   ‚úÖ Gerenciamento de sess√µes');
        console.log('   ‚úÖ Logout e invalida√ß√£o de sess√£o');
        console.log();
        console.log('üåê A aplica√ß√£o web est√° pronta para produ√ß√£o!');
        console.log();
        
    } catch (error) {
        console.error('‚ùå Erro durante os testes:', error);
        console.error('üîç Stack trace:', error.stack);
        process.exit(1);
    }
}

// Verificar se node-fetch est√° dispon√≠vel
if (typeof fetch === 'undefined') {
    console.log('üì¶ Instalando depend√™ncia node-fetch...');
    require('child_process').execSync('npm install node-fetch@2 form-data', { stdio: 'inherit' });
    console.log('‚úÖ Depend√™ncia instalada');
    console.log();
}

// Executar testes
testWebApplication().catch(console.error);
